{"version":3,"sources":["СreditAmount.js","Month.js","AmountToRefund.js","App.js","serviceWorker.js","index.js"],"names":["СreditAmount","sizePic","e","result","currentTarget","value","props","setCreditValue","className","this","creditValue","id","type","min","max","step","defaultValue","onInput","React","Component","Month","setMothValue","mothValue","AmountToRefund","resultCredit","toFixed","rate$","App","payment","setState","Number","state","fetch","then","response","json","data","Cur_OfficialRate","prevProps","prevState","snapshot","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qSA0BeA,G,sNAnBXC,QAAU,SAACC,GACP,IAAIC,EAAQD,EAAEE,cAAcC,MAC5B,EAAKC,MAAMC,eAAeJ,I,wEAI1B,OACI,yBAAKK,UAAU,WACX,yBAAKA,UAAU,eACX,+GACA,0BAAMA,UAAU,IAAIC,KAAKH,MAAMI,cAEnC,2BAAOF,UAAU,UAAUG,GAAG,OAAOC,KAAK,QAAQC,IAAI,IAAIC,IAAI,OAAOC,KAAK,MAAMC,aAAcP,KAAKH,MAAMI,YAClGO,QAASR,KAAKR,e,GAfViB,IAAMC,YCuBlBC,E,YAxBX,WAAYd,GAAQ,IAAD,8BACf,4CAAMA,KAGVL,QAAU,SAACC,GACP,IAAIC,EAAQD,EAAEE,cAAcC,MAC5B,EAAKC,MAAMe,aAAalB,IANT,E,sEAUf,OACI,yBAAKK,UAAU,WACX,yBAAKA,UAAU,eACX,0IACA,0BAAMA,UAAU,IAAIC,KAAKH,MAAMgB,YAEnC,2BAAOd,UAAU,UAAUG,GAAG,OAAOC,KAAK,QAAQC,IAAI,IAAIC,IAAI,KAAKC,KAAK,IACjEC,aAAcP,KAAKH,MAAMgB,UACzBL,QAASR,KAAKR,e,GAnBjBiB,IAAMC,WCYXI,G,uLATP,OACI,yBAAKf,UAAU,cACX,yBAAKA,UAAU,UAAf,4DAAoC,kCAAQC,KAAKH,MAAMkB,aAAaC,QAAQ,IACxE,oCAAUhB,KAAKH,MAAMkB,aAAaf,KAAKH,MAAMoB,OAAOD,QAAQ,GAA5D,kD,GALSP,IAAMC,YC8DpBQ,E,YA1DX,WAAYrB,GAAQ,IAAD,8BACf,4CAAMA,KAqBVsB,QAAU,WACN,EAAKC,SAAS,CACVL,aAAcM,OAAO,EAAKC,MAAMrB,aAAwC,IAAzB,EAAKqB,MAAMrB,YAAqB,GAAK,EAAKqB,MAAMT,aAxBpF,EAoCnBf,eAAiB,SAACJ,GACd,EAAK0B,SAAS,CAACnB,YAAaP,KArCb,EAuCnBkB,aAAe,SAAClB,GACZ,EAAK0B,SAAS,CAACP,UAAWnB,KAtC1B,EAAK4B,MAAQ,CACTrB,YAAa,EACbY,UAAW,EACXE,aAAc,EACdE,MAAO,GANI,E,iFAUE,IAAD,OAChBM,MAAM,4CACDC,MAAK,SAAAC,GACF,OAAOA,EAASC,UAEnBF,MAAK,SAAAG,GACF,EAAKP,SAAS,CACVH,MAAOU,EAAKC,wB,yCAUTC,EAAWC,EAAWC,GACjC/B,KAAKsB,MAAMrB,cAAgB6B,EAAU7B,YACrCD,KAAKmB,UAEEnB,KAAKsB,MAAMT,YAAciB,EAAUjB,WAC1Cb,KAAKmB,Y,+BAaT,OACI,yBAAKpB,UAAU,OACX,oDACA,yBAAKA,UAAU,WACX,kBAAC,EAAD,CAAcE,YAAaD,KAAKsB,MAAMrB,YAAaH,eAAgBE,KAAKF,iBACxE,kBAAC,EAAD,CAAOe,UAAWb,KAAKsB,MAAMT,UAAWD,aAAcZ,KAAKY,eAC3D,kBAAC,EAAD,CAAgBG,aAAcf,KAAKsB,MAAMP,aAAcE,MAAOjB,KAAKsB,MAAML,c,GApD3ER,IAAMC,WCKJsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD0H9B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,kB","file":"static/js/main.195c810f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.scss';\r\nimport './CreditAmount.scss'\r\n\r\n\r\nclass СreditAmount extends React.Component {\r\n\r\n    sizePic = (e) =>{\r\n        let result= e.currentTarget.value\r\n        this.props.setCreditValue(result)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='wrapper'>\r\n                <div className='description'>\r\n                    <label>Сумма кредита($)</label>\r\n                    <span className=''>{this.props.creditValue}</span>\r\n                </div>\r\n                <input className=\"e-range\" id=\"loan\" type=\"range\" min=\"0\" max=\"1000\" step=\"100\" defaultValue={this.props.creditValue}\r\n                       onInput={this.sizePic}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default СreditAmount;","import React from 'react';\r\nimport './App.scss';\r\n\r\nclass Month extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    sizePic = (e) => {\r\n        let result= e.currentTarget.value\r\n        this.props.setMothValue(result)\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className='wrapper'>\r\n                <div className='description'>\r\n                    <label>Количество месяцев</label>\r\n                    <span className=''>{this.props.mothValue}</span>\r\n                </div>\r\n                <input className=\"e-range\" id=\"loan\" type=\"range\" min=\"1\" max=\"12\" step=\"1\"\r\n                       defaultValue={this.props.mothValue}\r\n                       onInput={this.sizePic}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Month;","import React from 'react';\r\nimport './AmountToRefund.scss'\r\n\r\n\r\nclass AmountToRefund extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"resultWrap\">\r\n                <div className='result'>К возврату: <span>${this.props.resultCredit.toFixed(2)}</span>\r\n                    <span> ({(this.props.resultCredit*this.props.rate$).toFixed(2)} бел.руб.)</span></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AmountToRefund;","import React from 'react';\nimport './App.scss';\nimport СreditAmount from \"./СreditAmount\";\nimport Month from \"./Month\";\nimport AmountToRefund from \"./AmountToRefund\";\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            creditValue: 0,\n            mothValue: 1,\n            resultCredit: 0,\n            rate$: 0\n        }\n    }\n\n    componentDidMount() {\n        fetch('http://www.nbrb.by/API/ExRates/Rates/145')\n            .then(response => {\n                return response.json()\n            })\n            .then(data => {\n                this.setState({\n                    rate$: data.Cur_OfficialRate\n                })\n            })\n    }\n\n    payment = () =>{\n        this.setState({\n            resultCredit: Number(this.state.creditValue) + this.state.creditValue * 0.16 / 12 * this.state.mothValue\n        })\n    }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.state.creditValue !== prevState.creditValue) {\n            this.payment()\n\n        } else if (this.state.mothValue !== prevState.mothValue) {\n            this.payment()\n        }\n    }\n\n    setCreditValue = (result) => {\n        this.setState({creditValue: result})\n    }\n    setMothValue = (result) => {\n        this.setState({mothValue: result})\n    }\n\n\n    render() {\n        return (\n            <div className=\"App\">\n                <h1>Bank Loan Calculator</h1>\n                <div className='wrapper'>\n                    <СreditAmount creditValue={this.state.creditValue} setCreditValue={this.setCreditValue}/>\n                    <Month mothValue={this.state.mothValue} setMothValue={this.setMothValue}/>\n                    <AmountToRefund resultCredit={this.state.resultCredit} rate$={this.state.rate$}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App/>, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}